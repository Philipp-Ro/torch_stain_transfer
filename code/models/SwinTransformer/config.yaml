# set paths for imge folder ( 2 folders corresponding images have to have the same name)
#------------------------------------------------------------------------------------------
# Training set_up
#------------------------------------------------------------------------------------------
# 
#----------------------------- Input ------------------------------------------------------
train_dir : 'C:/Users/phili/OneDrive/Uni/WS_22/Masterarbeit/Masterarbeit_Code_Philipp_Rosin/Data_set_BCI_challange/train'
img_size : [256,256]
in_channels : 3
num_epochs : 1
decay_epoch : 5
batch_size : 1
device : 'cuda'
#
#----------------------------- Output -----------------------------------------------------
output_path : 'C:/Users/phili/OneDrive/Uni/WS_22/Masterarbeit/Masterarbeit_Code_Philipp_Rosin/torch_stain_transfer/experiment-results'
output_folder : 'Swin_transformer'
model_name : 'gen_G_weights_final.pth'
#
#
#------------------------------------------------------------------------------------------
# Preprocessing
#------------------------------------------------------------------------------------------
# the preprocess list will determin the preprocesscing for each image HE/IHC before it will enter the network in tzraining 
#
# [normalise] -----> normalize the image based on the mean and std 
# either use the costum Mean and std of the bci train set for immunohistochemical dataset or the img_net mean and std
# use normalise_token for iether 'img_net' or 'bci'
normalise_token : 'bci'
mean_HE : [0.6374934061876859, 0.54221270388668, 0.6263932794073621]
std_HE : [0.08630574808474256, 0.09923751557584395, 0.07704577263561006]

mean_IHC : [0.7687480146058773, 0.7460195554334789, 0.7200858060498716]
std_IHC : [0.05067490897275364, 0.05804296102376095, 0.06596264508250156]

mean_img_net : [0.485, 0.456, 0.406] 
std_img_net: [0.229, 0.224, 0.225]

# 'grayscale' --------------> transform the image into grayscale => 3 in_channel to 1 
# 'instance_norm' ----------> choose img_net or bci 
# 'colorjitter' ------------> will augment the input image 
# 'normalise' --------------> normalise mean = 0 and std = 1
preprocess_HE : []
preprocess_IHC : []
#
#
#------------------------------------------------------------------------------------------
# Model Set up
#------------------------------------------------------------------------------------------
# hidden_dim ------------>   upsacling for the cannel number 
#                            taken from literature ===>  swin_T = 96 | swin_S = 96 | swin_B = 128 | swin_L = 192
# layers ---------------->   layers in each stage of the transformer the input has to be an EVEN NUMBER 
#                            taken from literature ===>  swin_T = (2, 2, 6, 2) | swin_S = (2, 2, 18, 2) | swin_B = (2, 2, 18, 2) | swin_L = (2, 2, 18, 2)
# heads ----------------->   number of heads for the attention module
#                            taken from literature ===>  swin_T = (3, 6, 12, 24) | swin_S = (3, 6, 12, 24) | swin_B = 4, 8, 16, 32) | swin_L = (6, 12, 24, 48)
# in_channels ----------->   number of input channels 
# out_channels ---------->   number of output channels
# head_dim -------------->   ?
# window_size ----------->   size of the patch windows has img_size % window_size has to be zero !!!
# downscaling_factors --->   downscaling of the image in each stage here it is 1 because we done downscale
hidden_dim : 96
layers : [2, 2, 6, 2]
heads : [3, 6, 12, 24]
in_channels : 3
out_channels : 3
head_dim : 32
window_size : 8
downscaling_factors : [1, 1, 1, 1]
relative_pos_embedding : True
# --------------------- Optimizer Settings ------------------------------------------------
learn_rate_gen : 0.0002
# the beta1 and beta2 for the Adam optimizer used for both the total generator optimizer and total disc optimizer 
beta1 : 0.5   
beta2 : 0.999  

# --------------------- Loss Settings -----------------------------------------------------
# availeble inputs :
#   'ssim' -------------> SSIM loss (1-ssim(fake,real))
#   'psnr' -------------> PSNR loss
#   'hist_loss' --------> compares histograms of the image channels and compares intersection of ral vs fake image 
total_loss_comp : []
#
# Loss Hyperparameters
generator_lambda : 1
ssim_lambda : 3
psnr_lambda : 0.05
hist_lambda : 10

#-----------------------------------------------------------------------------------------------
# Testing
#-----------------------------------------------------------------------------------------------
test_dir : 'C:/Users/phili/OneDrive/Uni/WS_22/Masterarbeit/Masterarbeit_Code_Philipp_Rosin/Data_set_BCI_challange/val'
num_test_epochs: 2
plots_per_epoch : 2










